package controllers

import play.api.mvc._
import scala.collection.mutable._
import models._
import play.api.data._
import play.api.data.Forms._
import anorm._

object Users extends Controller{
  
  val users: Map[String, User] = new HashMap

  def add = Action {
    Ok(views.html.users.add(form))
  }
  
  def save = Action { implicit request =>
    /*
    val user = form.bindFromRequest.get
    users.put(user.id.toString, user)
    Redirect(routes.Users.list)
    */
    form.bindFromRequest.fold(
      formWithErrors => BadRequest(views.html.users.add(formWithErrors)),
      user => {
        User.save(user)
        Redirect(routes.Users.list).flashing("success" -> "User successfully created!")
      })
  }
  
  def list = Action { implicit request =>
    Ok(views.html.users.list(User.list))
  }
  
  def edit(id: Int) = Action {
    User.load(id).map { user =>
      val bindedForm = form.fill(user)
      Ok(views.html.users.edit(bindedForm))
    }.getOrElse(NotFound)
  }
  
  def update(id: Int) = Action { implicit request =>
    /*
    val user = form.bindFromRequest.get
    user.id = id
    users.put(id.toString, user)
    Redirect(routes.Users.list)
    */
    User.load(id) map { user =>
      form.bindFromRequest.fold(
        formWithErrors => BadRequest(views.html.users.edit(formWithErrors)),
        user => {
          User.update(id, user)
          Redirect(routes.Users.list)
        })
    }.getOrElse(NotFound)
  }
  
  def delete(id: Int) = Action {
    users.remove(id.toString)
    Redirect(routes.Users.list)
  }
  
  val form = Form(
    mapping(
      "id" -> ignored(NotAssigned: Pk[Int]),
      "username" -> nonEmptyText,
      "email" -> email,
      "age" -> number)(User.apply)(User.unapply))
  
}